mutate(Scenario = factor(Scenario, levels = c("No Setback (Addtional amount)", "Current Setback"))) %>%
rename(`Land Use Type` = `LandType`)
ggplot(data = graphData , aes(x =  `Land Use Type`, y = Generation, fill = Scenario)) +
geom_bar(stat='identity') +
#facet_wrap(~LandType, scales = 'free') +
theme(legend.position = "right",
axis.title.x = element_blank(),
#axis.title.y = element_blank(),
#axis.text.x = element_blank(),
#axis.text.x = element_text(angle = 0, vjust = 0.5, hjust=1),
text = element_text(size = 45)) +
scale_fill_manual(values = c("palegreen3","palegreen4")) +
#scale_fill_brewer(palette = "Greens") +
ylab("Geneartion (TWh)")
graphData %>%
spread(key = Scenario, value = Generation) %>%
mutate(incRate = 100 * `No Setback (Addtional amount)` / c(`Current Setback`) )
# Fig 3 #
### How much would generation be reduced by setback regulation? ### by SiGun including both setback and Nosetback
totalData_woID_mnpt_Reduction_bySGG <- totalData_woID_mnpt_NoSB %>%
left_join(totalData_woID_mnpt_YesSB, by = c("LandType", "Technology", "SiGun", "setbackRegion")) %>%
mutate(Generation.x = Generation.x - Generation.y,
Scenario.x = 'Reduction') %>%
rename(Scenario = Scenario.x,
Area = Area.x,
Capacity = Capacity.x,
Generation = Generation.x,
TC = TC.x) %>%
select(LandType, SiGun, Scenario, Area, Capacity, Generation, TC) %>%
group_by(LandType, SiGun, Scenario) %>% summarize(Generation = sum(Generation)) %>% ungroup()
## tempData : Reduction양을 LandType별로 색을 넣으려고, Scenario 칼럼에 '공공건축물' (Resid)단어를 넣을 예정.
totalData_woID_mnpt_Reduction_bySGG_graphData <- totalData_woID_mnpt_Reduction_bySGG %>%
TypeToEng() %>%
mutate(Scenario = LandType) %>%
select(-LandType)
## just get the order of factors in SiGun lists.
SGGorder_bySetbackGen <- totalData_woID_mnpt_YesSB %>%
group_by(SiGun) %>% summarize(Generation = sum(Generation)) %>% ungroup() %>%
SGG_to_Eng() %>%
arrange(desc(Generation)) %>%
pull(SiGun)
graphData <- totalData_woID_mnpt_YesSB %>%
bind_rows(totalData_woID_mnpt_Reduction_bySGG_graphData) %>%
group_by(SiGun, Scenario) %>% summarize(Generation = sum(Generation)) %>% ungroup() %>%
SGG_to_Eng() %>%
mutate(SiGun = factor(SiGun, levels = SGGorder_bySetbackGen)) %>%
mutate(Scenario = factor(Scenario, levels = rev(c("Current Setback", "Farmland", "Mountain", "Residential", "Industrial", "Water", "Logistics",  "Public", 'Roadside',"Parking"))))
ggplot(data = graphData , aes(x =  SiGun, y = Generation, fill = Scenario)) +
geom_bar(stat='identity', color = 'black') +
#facet_wrap(~LandType, scales = 'free') +
theme(legend.position = "right",
axis.title.x = element_blank(),
#axis.title.y = element_blank(),
#axis.text.x = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
text = element_text(size = 45)) +
#scale_fill_manual(values = c("palegreen3","palegreen4")) +
#scale_fill_brewer(palette = "Greens") +
ylab("Generation(TWh)")
#graphData_forCheck <-
graphData_LandTypeTotal_temp <- graphData %>%
group_by(Scenario) %>% summarize(Generation = sum(Generation)) %>% ungroup()
graphData_sharebySGG_byLandType <- graphData %>%
left_join(graphData_LandTypeTotal_temp, by = "Scenario") %>%
mutate(share = 100 * c(Generation.x / Generation.y))
graphDataVV <- graphData_sharebySGG_byLandType %>%
filter(Scenario == 'Farmland') %>%
arrange(desc(share))
## Fig 4 : Supply curve of PV
rawData_fullpower_wLCOE_ordered_YesSB <- totalData %>%
mutate(LCOE = LCOE * 1000) %>%  # Unit : $/kWh to $/MWh
arrange(desc(Generation)) %>%
arrange(LCOE) %>%
filter(Scenario == "Current Setback") %>%
TypeToEng() %>%
mutate(LandType = factor(LandType, levels = rev(c("Residential", "Industrial", "Logistics", "Public", "Farmland", "Mountain", "Roadside", "Parking", "Water"))))
#filter(LandType != '육상정수역')
rawData_fullpower_wLCOE_ordered_NoSB <- totalData %>%
mutate(LCOE = LCOE * 1000) %>%  # Unit : $/kWh to $/MWh
arrange(desc(Generation)) %>%
arrange(LCOE) %>%
filter(Scenario == "No Setback") %>%
TypeToEng() %>%
mutate(LandType = factor(LandType, levels = rev(c("Residential", "Industrial", "Logistics", "Public", "Farmland", "Mountain", "Roadside", "Parking", "Water"))))
#filter(LandType != '육상정수역')
### 전체 ###
testGraph_YesSB <- rawData_fullpower_wLCOE_ordered_YesSB %>%
mutate(x1 = lag(cumsum(Generation)),
x2 = cumsum(Generation),
y1 = 0,
y2 = LCOE) %>%
mutate(x1 = case_when(
is.na(x1) ~ 0,
TRUE ~ x1
))
testGraph_NoSB <- rawData_fullpower_wLCOE_ordered_NoSB %>%
mutate(x1 = lag(cumsum(Generation)),
x2 = cumsum(Generation),
y1 = 0,
y2 = LCOE) %>%
mutate(x1 = case_when(
is.na(x1) ~ 0,
TRUE ~ x1
))
TWh_9GW <- c(9*0.136*8760/1000) # 9GW * CF * hours * converter
SMP <- c(167 / exRate * 1000)   # 167(w
library(dplyr)
library(readxl)
library(tidyr)
library(stringr)
library(ggplot2)
#### 에너지수급 통계 가정부문 data export ####
SGG_EB_column_names <- c("sector",
"TotalofPetroleum",
"EnergyUse", "Gasoline", "Kerosene", "DieselOil", "B-A", "B-B", "B-C", "JA-1", "AVI-G", "LPG", "Propane", "Butane",
"Non-EnergyUse", "Naphtha", "Solvent", "Asphalt", "Lubricant", "Paraffin-Wax", "PetroleumCoke", "OtherProducts",
"Gas", "Electricity", "Heat", "RenewablesOthers", "Total",
"year", "region")
SGG_EB_wanted_energyType <- c("TotalofPetroleum", "Gas", "Electricity", "Heat", "RenewablesOthers")
SGG_EB_year <- c(2019, 2020, 2021, 2022)
sheetList_all <- excel_sheets(path = "./2022_시군구_에너지수급통계.xlsx")
setwd("C:/Users/DESKTOP/Desktop/에너지빈곤/시군구 수급통계")
library(dplyr)
library(readxl)
library(tidyr)
library(stringr)
library(ggplot2)
#### 에너지수급 통계 가정부문 data export ####
SGG_EB_column_names <- c("sector",
"TotalofPetroleum",
"EnergyUse", "Gasoline", "Kerosene", "DieselOil", "B-A", "B-B", "B-C", "JA-1", "AVI-G", "LPG", "Propane", "Butane",
"Non-EnergyUse", "Naphtha", "Solvent", "Asphalt", "Lubricant", "Paraffin-Wax", "PetroleumCoke", "OtherProducts",
"Gas", "Electricity", "Heat", "RenewablesOthers", "Total",
"year", "region")
SGG_EB_wanted_energyType <- c("TotalofPetroleum", "Gas", "Electricity", "Heat", "RenewablesOthers")
SGG_EB_year <- c(2019, 2020, 2021, 2022)
sheetList_all <- excel_sheets(path = "./2022_시군구_에너지수급통계.xlsx")
sheetList_GG <- sheetList_all[grepl("경기", sheetList_all)]
fullData <- c()
for ( i in 1:length(SGG_EB_year)) {
eachyear <- SGG_EB_year[i]
for ( j in 1:length(sheetList_GG)) {
fileName <- paste0('./', eachyear, '_시군구_에너지수급통계', ".xlsx")
eachSGG <- sheetList_GG[j]
eachData <- readxl::read_excel(fileName,
sheet = eachSGG,
col_names = F,
range = "A24:AA24") %>%
mutate(year = eachyear,
region = eachSGG)
colnames(eachData) <- SGG_EB_column_names
fullData <- fullData %>%
bind_rows(eachData)
}
}
#### 시군별 인구 data ####
readPopData <- function() {
file_name <- paste0("../data/SGG_pop_hist.xlsx")
readxl::read_excel(file_name, sheet = '데이터') -> pop_data
#colnames(pop_data)[1] <- "SIDO_SIGUNGU_NM"
pop_data %>%
rename(SIDO = province) %>%
mutate(SIGUNGU = str_replace(SIGUNGU, "　　　", "")) %>%
# attach a provincial name (we need to avoid duplicated names of sigunu)
# delete the row for the total
filter(!SIGUNGU %in% province_total) %>%
# delete obselete columns
#select(-SIGUNGU) %>%
gather(year, value, -c(SIDO, SIGUNGU)) %>%
mutate(value = as.numeric(value)) %>%
replace(is.na(.), 0) %>%
mutate(SIDO_SIGUNGU_NM = paste0(SIDO, "_", SIGUNGU)) %>%
mutate(Units = 'ea') -> pop_data
return(pop_data)
}
rename_old_SGG_list <- function(data) {
output_data <- data %>%
mutate(SIDO_SIGUNGU_NM = case_when(
# 대구 군위군
SIDO_SIGUNGU_NM == '대구_군위군' ~ '경북_군위군',
#인천
SIDO_SIGUNGU_NM == '인천_남구' ~ '인천_미추홀구',
SIDO_SIGUNGU_NM == '인천_북구' ~ '없어짐',
#경기
SIDO_SIGUNGU_NM == '경기_송탄시' ~ '경기_평택시',
SIDO_SIGUNGU_NM == '경기_평택군' ~ '경기_평택시',
SIDO_SIGUNGU_NM == '경기_일산구' ~ '없어짐', # 경기_일산구 -> 경기_고양시의 '일산동구'와 '일산서구'로 나뉘어짐,
SIDO_SIGUNGU_NM == '경기_미금시' ~ '경기_남양주시',
SIDO_SIGUNGU_NM == '경기_남양주군' ~ '경기_남양주시',
SIDO_SIGUNGU_NM == '경기_양주군' ~ '경기_양주시',
SIDO_SIGUNGU_NM == '경기_여주군' ~ '경기_여주시',
SIDO_SIGUNGU_NM == '경기_평택군' ~ '경기_평택시',
SIDO_SIGUNGU_NM == '경기_화성군' ~ '경기_화성시',
SIDO_SIGUNGU_NM == '경기_파주군' ~ '경기_파주시',
SIDO_SIGUNGU_NM == '경기_광주군' ~ '경기_광주시',
SIDO_SIGUNGU_NM == '경기_포천군' ~ '경기_포천시',
SIDO_SIGUNGU_NM == '경기_이천군' ~ '경기_이천시',
SIDO_SIGUNGU_NM == '경기_용인군' ~ '경기_용인시',
SIDO_SIGUNGU_NM == '경기_안성군' ~ '경기_안성시',
SIDO_SIGUNGU_NM == '경기_김포군' ~ '경기_김포시',
SIDO_SIGUNGU_NM == '경기_강화군' ~ '인천_강화군',
SIDO_SIGUNGU_NM == '경기_옹진군' ~ '인천_옹진군',
#강원
SIDO_SIGUNGU_NM == '강원_춘천군' ~ '강원_춘천시',
SIDO_SIGUNGU_NM == '강원_원주군' ~ '강원_원주시',
SIDO_SIGUNGU_NM == '강원_명주군' ~ '강원_강릉시',
SIDO_SIGUNGU_NM == '강원_삼척군' ~ '강원_삼척시',
#충북
SIDO_SIGUNGU_NM == '충북_청원군' ~ '충북_청주시',  # 충북_청원군 -> 충북_청주시의 청원구 로 변경
SIDO_SIGUNGU_NM == '충북_중원군' ~ '충북_충주시',
SIDO_SIGUNGU_NM == '충북_제천군' ~ '충북_제천시',
#충남
SIDO_SIGUNGU_NM == '충남_대천시' ~ '충남_보령시',
SIDO_SIGUNGU_NM == '충남_온양시' ~ '충남_아산시',
SIDO_SIGUNGU_NM == '충남_연기군' ~ '세종_세종시',
SIDO_SIGUNGU_NM == '충남_공주군' ~ '충남_공주시',
SIDO_SIGUNGU_NM == '충남_논산군' ~ '충남_논산시',
SIDO_SIGUNGU_NM == '충남_보령군' ~ '충남_보령시',
SIDO_SIGUNGU_NM == '충남_서산군' ~ '충남_서산시',
SIDO_SIGUNGU_NM == '충남_당진군' ~ '충남_당진시',
SIDO_SIGUNGU_NM == '충남_아산군' ~ '충남_아산시',
SIDO_SIGUNGU_NM == '충남_천안군' ~ '충남_천안시',
#전북
SIDO_SIGUNGU_NM == '전북_남원군' ~ '전북_남원시',
SIDO_SIGUNGU_NM == '전북_정읍군' ~ '전북_정읍시',
SIDO_SIGUNGU_NM == '전북_김제군' ~ '전북_김제시',
SIDO_SIGUNGU_NM == '전북_옥구군' ~ '전북_군산시',
SIDO_SIGUNGU_NM == '전북_익산군' ~ '전북_익산시',
#전남
SIDO_SIGUNGU_NM == '전남_여천시' ~ '전남_여수시',
SIDO_SIGUNGU_NM == '전남_여천군' ~ '전남_여수시',
SIDO_SIGUNGU_NM == '전남_동광양시' ~ '전남_광양시',
SIDO_SIGUNGU_NM == '전남_광양군' ~ '전남_광양시',
SIDO_SIGUNGU_NM == '전남_승주군' ~ '전남_순천시',
SIDO_SIGUNGU_NM == '전남_나주군' ~ '전남_나주시',
#경북
SIDO_SIGUNGU_NM == '경북_점촌시' ~ '경북_문경시',
SIDO_SIGUNGU_NM == '경북_달성군' ~ '없어짐', # 대구의 달성구로 변경됨.
SIDO_SIGUNGU_NM == '경북_안동군' ~ '경북_안동시',
SIDO_SIGUNGU_NM == '경북_영일군' ~ '경북_포항시',
SIDO_SIGUNGU_NM == '경북_경주군' ~ '경북_경주시',
SIDO_SIGUNGU_NM == '경북_영천군' ~ '경북_영천시',
SIDO_SIGUNGU_NM == '경북_경산군' ~ '경북_경산시',
SIDO_SIGUNGU_NM == '경북_금릉군' ~ '경북_김천시',
SIDO_SIGUNGU_NM == '경북_선산군' ~ '경북_구미시',
SIDO_SIGUNGU_NM == '경북_상주군' ~ '경북_상주시',
SIDO_SIGUNGU_NM == '경북_문경군' ~ '경북_문경시',
SIDO_SIGUNGU_NM == '경북_영풍군' ~ '경북_영주시',
#경남
SIDO_SIGUNGU_NM == '경남_마산시' ~ '경남_창원시',
SIDO_SIGUNGU_NM == '경남_진해시' ~ '경남_창원시',
SIDO_SIGUNGU_NM == '경남_울산시' ~ '없어짐', #울산으로 이전
SIDO_SIGUNGU_NM == '경남_합포구' ~ '없어짐', #마산시의 일부이며, 마산시는 창원시로 병합됨
SIDO_SIGUNGU_NM == '경남_회원구' ~ '없어짐', #마산시의 일부이며, 마산시는 창원시로 병합됨
SIDO_SIGUNGU_NM == '경남_충무시' ~ '경남_통영시',
SIDO_SIGUNGU_NM == '경남_삼천포시' ~ '경남_사천시',
SIDO_SIGUNGU_NM == '경남_장승포시' ~ '경남_거제시',
SIDO_SIGUNGU_NM == '경남_진양군' ~ '경남_진주시',
SIDO_SIGUNGU_NM == '경남_밀양군' ~ '경남_밀양시',
SIDO_SIGUNGU_NM == '경남_양산군' ~ '경남_양산시',
SIDO_SIGUNGU_NM == '경남_울산군' ~ '없어짐',
SIDO_SIGUNGU_NM == '경남_김해군' ~ '경남_김해시',
SIDO_SIGUNGU_NM == '경남_창원군' ~ '없어짐', # 마산시의 합포구로 병합되었으나, 마산시는 창원시로 병합됨.
SIDO_SIGUNGU_NM == '경남_통영군' ~ '경남_통영시',
SIDO_SIGUNGU_NM == '경남_거제군' ~ '경남_거제시',
SIDO_SIGUNGU_NM == '경남_사천군' ~ '경남_사천시',
#제주
SIDO_SIGUNGU_NM == '제주_북제주군' ~ '제주_제주시',
SIDO_SIGUNGU_NM == '제주_남제주군' ~ '제주_서귀포시',
TRUE ~ SIDO_SIGUNGU_NM
)) %>%
filter(SIDO_SIGUNGU_NM != '없어짐') %>%
group_by(SIDO_SIGUNGU_NM, year, Units) %>% summarize(value = sum(value)) %>% ungroup() %>%
filter( !SIDO_SIGUNGU_NM %in% branch_office) %>%
filter( !SIDO_SIGUNGU_NM %in% SIGU)
return(output_data)
}
sepRegionName <- function(data) {
outputData <- data %>%
# mutate(SIDO = unlist(lapply(strsplit(SIDO_SIGUNGU_NM, split = "_"), `[[`, 1)),
#        SIGUNGU = unlist(lapply(strsplit(SIDO_SIGUNGU_NM, split = "_"), `[[`, 2)))
mutate(SIDO = case_when(
SIDO_SIGUNGU_NM != "전국" ~ unlist(lapply(strsplit(SIDO_SIGUNGU_NM, split = "_"), `[[`, 1)),
SIDO_SIGUNGU_NM == "전국" ~ "전국"
)) %>%
mutate(SIGUNGU = case_when(
SIDO_SIGUNGU_NM != "전국" ~ unlist(lapply(strsplit(SIDO_SIGUNGU_NM, split = "_"), `[[`, 2)),
SIDO_SIGUNGU_NM == "전국" ~ "전국"
))
return(outputData)
}
branch_office <- c('인천_중구영종출장소', '인천_중구용유출장소', '인천_서구검단출장소',
'경기_송탄출장소', '경기_안중출장소', '경기_풍양출장소', '경기_화성시동부출장소', '경기_화성시동탄출장소',
'충북_동부출장소', '충북_서부출장소', '충북_증평출장소',
'충남_계룡출장소',
'전북_전주시효자출장소', '전북_익산시함열출장소',
'경남_사천남양출장소', '경남_장유출장소', '경남_양산시웅상출장소')
SIGU <- c("경기_장안구", "경기_권선구", "경기_팔달구", "경기_영통구", "경기_수정구", "경기_중원구", "경기_분당구", "경기_만안구", "경기_동안구", "경기_원미구", "경기_소사구", "경기_오정구",
"경기_상록구", "경기_단원구", "경기_덕양구", "경기_일산동구", "경기_일산서구", "경기_처인구", "경기_기흥구", "경기_수지구",
"충북_서원구", "충북_청원구", "충북_상당구", "충북_흥덕구",
"충남_동남구", "충남_서북구",
"전북_완산구", "전북_덕진구",
"경북_남구", "경북_북구",
"경남_의창구", "경남_성산구", "경남_마산합포구", "경남_마산회원구", "경남_진해구")
province_total <- c('전국', '서울특별시', '부산광역시', '대구광역시', '인천광역시', '광주광역시', '대전광역시', '울산광역시', '세종특별자치시', '경기도',
'강원특별자치도', '충청북도', '충청남도', '전북특별자치도', '전라남도', '경상북도', '경상남도', '제주특별자치도')
SGG_popData <- readPopData() %>%
rename_old_SGG_list() %>%
sepRegionName() %>%
filter(SIDO == '경기') %>%
mutate(region = paste0(SIDO, SIGUNGU)) %>%
mutate(year = as.numeric(year))
graphData <- fullData %>%
left_join(SGG_popData, by = c("region", "year")) %>%
rename(pop = value) %>%
select(SIDO, SIGUNGU, year, Kerosene, Propane, pop) %>%
mutate(KerosenePerCapita = Kerosene / pop,
PropanePerCapita = Propane / pop) %>%
filter(year == 2022)
ggplot(graphData, aes(x = SIGUNGU, y = KerosenePerCapita)) +
geom_bar(stat = 'identity', position = 'stack') +
#geom_hline(yintercept = 1.56, linetype = 'dashed', colour = 'gray', linewidth = 1.5) +
theme(text = element_text(size = 40),
axis.text.x = element_text(angle = 90),
legend.position = 'right',
axis.title.x = element_blank(),
axis.title.y = element_blank())
graphData
unique(graphData$SIGUNGU)
length(unique(graphData$SIGUNGU))
fullData
unique(fullData$region)
head(fullData)
unique(fullData$region)
fullData <- fullData %>%
filter(region != "경기기타")
graphData <- fullData %>%
left_join(SGG_popData, by = c("region", "year")) %>%
rename(pop = value) %>%
select(SIDO, SIGUNGU, year, Kerosene, Propane, pop) %>%
mutate(KerosenePerCapita = Kerosene / pop,
PropanePerCapita = Propane / pop) %>%
filter(year == 2022)
ggplot(graphData, aes(x = SIGUNGU, y = KerosenePerCapita)) +
geom_bar(stat = 'identity', position = 'stack') +
#geom_hline(yintercept = 1.56, linetype = 'dashed', colour = 'gray', linewidth = 1.5) +
theme(text = element_text(size = 40),
axis.text.x = element_text(angle = 90),
legend.position = 'right',
axis.title.x = element_blank(),
axis.title.y = element_blank())
head(graphData)
ggplot(graphData, aes(x = SIGUNGU, y = PropanePerCapita)) +
geom_bar(stat = 'identity', position = 'stack') +
#geom_hline(yintercept = 1.56, linetype = 'dashed', colour = 'gray', linewidth = 1.5) +
theme(text = element_text(size = 40),
axis.text.x = element_text(angle = 90),
legend.position = 'right',
axis.title.x = element_blank(),
axis.title.y = element_blank())
graphData
fullData
fullData %>%
left_join(SGG_popData, by = c("region", "year")) %>%
rename(pop = value)
fullData %>%
left_join(SGG_popData, by = c("region", "year")) %>%
rename(pop = value)
SGG_EB_column_names_TotalColumn <- c("TotalofPetroleum", "EnergyUse", "LPG", "Non-EnergyUse", "Total")
SGG_EB_column_names[SGG_EB_column_names_TotalColumn]
SGG_EB_column_names %in% SGG_EB_column_names_TotalColumn
SGG_EB_column_names[SGG_EB_column_names %in% SGG_EB_column_names_TotalColumn]
SGG_EB_column_names[!c(SGG_EB_column_names %in% SGG_EB_column_names_TotalColumn)]
SGG_EB_column_names[!c(SGG_EB_column_names %in% c(SGG_EB_column_names_TotalColumn, "sector", "year", "region"))]
SGG_EB_column_names_eachEnergy <- SGG_EB_column_names[!c(SGG_EB_column_names %in% c(SGG_EB_column_names_TotalColumn, "sector", "year", "region"))]
test <- fullData %>%
left_join(SGG_popData, by = c("region", "year")) %>%
rename(pop = value)
View(test)
test <- fullData %>%
left_join(SGG_popData, by = c("region", "year")) %>%
rename(pop = value) %>%
select(-region, -SIDO_SIGUNGU_NM, -Units)
View(test)
?gather
test <- fullData %>%
left_join(SGG_popData, by = c("region", "year")) %>%
rename(pop = value) %>%
select(-region, -SIDO_SIGUNGU_NM, -Units) %>%
gather(-SIDO, -SIGUNGU, -year, -sector, key = variable, value = value)
test
View(test)
test <- fullData %>%
left_join(SGG_popData, by = c("region", "year")) %>%
rename(pop = value) %>%
select(-region, -SIDO_SIGUNGU_NM, -Units) %>%
gather(-SIDO, -SIGUNGU, -year, -pop, -sector, key = variable, value = value)
View(test)
test
unique(test$variable)
test
test <- fullData %>%
left_join(SGG_popData, by = c("region", "year")) %>%
rename(pop = value) %>%
select(-region, -SIDO_SIGUNGU_NM, -Units) %>%
gather(-SIDO, -SIGUNGU, -year, -pop, -sector, key = variable, value = value) %>%
mutate(perCapitavalue = value / pop)
test
test <- fullData %>%
left_join(SGG_popData, by = c("region", "year")) %>%
rename(pop = value) %>%
select(-region, -SIDO_SIGUNGU_NM, -Units) %>%
gather(-SIDO, -SIGUNGU, -year, -pop, -sector, key = variable, value = value) %>%
mutate(pCvalue = value / pop)
test
unique(test$year)
test_graphData <- test %>%
filter(year == 2022) %>%
select(SIGUNGU, variable, "value")
test_graphData
test_graphData <- test %>%
filter(year == "2022") %>%
select(SIGUNGU, variable, "value")
test_graphData
pickGraphData <- function(data, year, energyType) {
outputData <- data %>%
filter(year == year,
variable == energyType) %>%
select(SIGUNGU, variable, value)
return(outputData)
}
pickGraphData(test, "2021", "propane")
test
unique(test$variable)
pickGraphData(test, "2021", "Propane")
graphData <- pickGraphData(test, "2021", "Propane")
graphData
ggplot(graphData, aes(x = SIGUNGU, y = value)) +
geom_bar(stat = 'identity', position = 'stack') +
#geom_hline(yintercept = 1.56, linetype = 'dashed', colour = 'gray', linewidth = 1.5) +
theme(text = element_text(size = 40),
axis.text.x = element_text(angle = 90),
legend.position = 'right',
axis.title.x = element_blank(),
axis.title.y = element_blank())
graphData <- pickGraphData(test, "2021", "Electricity")
ggplot(graphData, aes(x = SIGUNGU, y = value)) +
geom_bar(stat = 'identity', position = 'stack') +
#geom_hline(yintercept = 1.56, linetype = 'dashed', colour = 'gray', linewidth = 1.5) +
theme(text = element_text(size = 40),
axis.text.x = element_text(angle = 90),
legend.position = 'right',
axis.title.x = element_blank(),
axis.title.y = element_blank())
graphData <- fullData %>%
left_join(SGG_popData, by = c("region", "year")) %>%
rename(pop = value) %>%
select(-region, -SIDO_SIGUNGU_NM, -Units) %>%
gather(-SIDO, -SIGUNGU, -year, -pop, -sector, key = variable, value = value) %>%
mutate(pCvalue = value / pop)
graphDataTotal <- fullData %>%
left_join(SGG_popData, by = c("region", "year")) %>%
rename(pop = value) %>%
select(-region, -SIDO_SIGUNGU_NM, -Units) %>%
gather(-SIDO, -SIGUNGU, -year, -pop, -sector, key = variable, value = value) %>%
mutate(pCvalue = value / pop)
pickGraphData <- function(data, year, energyType) {
outputData <- data %>%
filter(year == year,
variable == energyType) %>%
select(SIGUNGU, variable, value)
return(outputData)
}
graphData <- pickGraphData(graphDataTotal, "2021", "Electricity")
ggplot(graphData, aes(x = SIGUNGU, y = value)) +
geom_bar(stat = 'identity', position = 'stack') +
#geom_hline(yintercept = 1.56, linetype = 'dashed', colour = 'gray', linewidth = 1.5) +
theme(text = element_text(size = 40),
axis.text.x = element_text(angle = 90),
legend.position = 'right',
axis.title.x = element_blank(),
axis.title.y = element_blank())
head(graphData)
graphDataTotal
unique(graphDataTotal$variable)
graphDataTotal %>%
filter(year == 2021,
variable %in% SGG_EB_column_names_eachEnergy)
graphData_A <- graphDataTotal %>%
filter(year == 2021,
variable %in% SGG_EB_column_names_eachEnergy)
head(graphData_A)
ggplot(graphData_A, aes(x = SIGUNGU, y = pCvalue, fill = variable)) +
geom_bar(stat = 'identity', position = 'stack') +
#geom_hline(yintercept = 1.56, linetype = 'dashed', colour = 'gray', linewidth = 1.5) +
theme(text = element_text(size = 40),
axis.text.x = element_text(angle = 90),
legend.position = 'right',
axis.title.x = element_blank(),
axis.title.y = element_blank())
SGG_EB_column_names_eachEnergyMain <- c("Kerosene", "Propane", "Butane", "Gas", "Electricity", "Heat", "RenewablesOthers")
graphData_A <- graphDataTotal %>%
filter(year == 2021,
variable %in% SGG_EB_column_names_eachEnergyMain)
ggplot(graphData_A, aes(x = SIGUNGU, y = pCvalue, fill = variable)) +
geom_bar(stat = 'identity', position = 'stack') +
#geom_hline(yintercept = 1.56, linetype = 'dashed', colour = 'gray', linewidth = 1.5) +
theme(text = element_text(size = 40),
axis.text.x = element_text(angle = 90),
legend.position = 'right',
axis.title.x = element_blank(),
axis.title.y = element_blank())
